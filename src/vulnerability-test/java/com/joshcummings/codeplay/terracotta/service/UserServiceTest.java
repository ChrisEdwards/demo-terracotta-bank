package com.joshcummings.codeplay.terracotta.service;

import com.joshcummings.codeplay.terracotta.AbstractEmbeddedTomcatTest;
import com.joshcummings.codeplay.terracotta.model.User;
import org.junit.Assert;
import org.testng.annotations.Test;

public class UserServiceTest extends AbstractEmbeddedTomcatTest {
	@Test(groups="passwordstorage")
	public void testSamePasswordDifferentHash() {
		UserService userService = this.context.getBean(UserService.class);
		User one = new User("one", "one", "password", "name", "one@terracotta");
		userService.addUser(one);

		User two = new User("two", "two", "password", "name", "two@terracotta");
		userService.addUser(two);

		one = userService.findByUsername("one");
		two = userService.findByUsername("two");

		Assert.assertNotEquals(one.getPassword(), two.getPassword());
	}

	@Test(groups="passwordstorage")
	public void testStrongPasswordHashAlgorithm() {
		UserService userService = this.context.getBean(UserService.class);
		User user = new User("user", "user", "password", "name", "user@terracotta");
		userService.addUser(user);

		user = userService.findByUsername("user");
		String hashed = user.getPassword();

		Assert.assertTrue(hashed.contains("$2a$"));
		String[] parts = hashed.split("\\$");
		Assert.assertTrue(parts.length == 4);
		Integer strength = Integer.parseInt(parts[2]);
		Assert.assertTrue(strength >= 10); // str
	}
	
	@Test(groups="sqlinjection")
	public void testSqlInjectionResistance() {
		UserService userService = this.context.getBean(UserService.class);
		// Create a legitimate user
		String safeId = "safe_id";
		User safeUser = new User(safeId, "safeuser", "password", "Safe User", "safe@example.com");
		userService.addUser(safeUser);
		
		// Try to add a user with SQL injection attempt in the name field
		String maliciousName = "malicious'); DELETE FROM users; --";
		User maliciousUser = new User("malicious_id", "malicious", "password", maliciousName, "malicious@example.com");
		
		try {
			// This should not cause SQL errors or delete any users
			userService.addUser(maliciousUser);
			
			// Verify the safe user still exists
			User retrievedSafeUser = userService.findByUsername("safeuser");
			Assert.assertNotNull("Safe user should still exist after attempted SQL injection", retrievedSafeUser);
			
			// Verify the malicious user was added, proving the SQL was properly escaped
			User retrievedMaliciousUser = userService.findByUsername("malicious");
			Assert.assertNotNull("Malicious user should have been added with escaped name", retrievedMaliciousUser);
			Assert.assertEquals("Malicious name should be preserved exactly as entered", 
				maliciousName, retrievedMaliciousUser.getName());
			
		} finally {
			// Clean up
			userService.removeUser("safeuser");
			userService.removeUser("malicious");
		}
	}
}