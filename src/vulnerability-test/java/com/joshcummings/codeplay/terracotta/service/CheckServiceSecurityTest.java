package com.joshcummings.codeplay.terracotta.service;

import com.joshcummings.codeplay.terracotta.AbstractEmbeddedTomcatTest;
import org.testng.annotations.Test;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class CheckServiceSecurityTest extends AbstractEmbeddedTomcatTest {
    
    @Test(groups="path-traversal")
    public void testPathTraversalPrevention() throws Exception {
        CheckService checkService = context.getBean(CheckService.class);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        
        // Create a legitimate test file
        String testDir = "images/checks";
        String testFile = "test-check-123";
        File dir = new File(testDir);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        
        File file = new File(testDir + "/" + testFile);
        try (FileOutputStream fos = new FileOutputStream(file)) {
            fos.write("test data".getBytes());
        }
        
        // Test 1: Valid path should work
        try {
            checkService.findCheckImage(testFile, baos);
            // If we get here, it worked as expected
            assert baos.toString().equals("test data");
        } catch (Exception e) {
            assert false : "Valid path should not throw exception: " + e.getMessage();
        }
        
        // Test 2: Path traversal attempt should be blocked
        baos.reset();
        try {
            checkService.findCheckImage("../../../etc/passwd", baos);
            // If we get here, security check failed
            assert false : "Path traversal was not prevented!";
        } catch (IllegalArgumentException e) {
            // Expected exception, test passed
            assert e.getMessage().contains("Invalid check number");
        }
        
        // Test 3: Another path traversal pattern
        baos.reset();
        try {
            checkService.findCheckImage("..%2f..%2f..%2fetc%2fpasswd", baos);
            // If we get here, security check failed
            assert false : "Path traversal with encoded characters was not prevented!";
        } catch (IllegalArgumentException e) {
            // Expected exception, test passed
            assert e.getMessage().contains("Invalid check number");
        }
        
        // Clean up test file
        Files.deleteIfExists(Paths.get(testDir + "/" + testFile));
    }
}