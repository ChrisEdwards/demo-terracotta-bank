package com.joshcummings.codeplay.terracotta.service;

import com.joshcummings.codeplay.terracotta.AbstractEmbeddedTomcatTest;
import com.joshcummings.codeplay.terracotta.model.User;
import org.junit.Assert;
import org.testng.annotations.Test;

/**
 * Security tests for the UserService to verify SQL injection vulnerabilities are fixed
 */
public class UserServiceSecurityTest extends AbstractEmbeddedTomcatTest {
    
    @Test(groups="sqli")
    public void testSqlInjectionInFindByUsernameAndPassword() {
        UserService userService = this.context.getBean(UserService.class);
        
        // Setup test data
        User testUser = new User("testid", "testuser", "testpassword", "Test User", "test@terracotta");
        userService.addUser(testUser);
        
        // Test with SQL injection attempts
        String maliciousUsername = "' OR '1'='1";
        String maliciousPassword = "' OR '1'='1";
        
        // If the SQL injection is fixed, this should return null since no user matches these credentials
        User foundUser = userService.findByUsernameAndPassword(maliciousUsername, maliciousPassword);
        
        // Assertion should pass if SQL injection vulnerability is fixed
        Assert.assertNull("SQL injection vulnerability still exists", foundUser);
        
        // Clean up test data
        userService.removeUser("testuser");
    }
    
    @Test(groups="sqli")
    public void testLegitimateLogin() {
        UserService userService = this.context.getBean(UserService.class);
        
        // Setup test data with known credentials
        User testUser = new User("testid2", "testuser2", "testpassword2", "Test User 2", "test2@terracotta");
        userService.addUser(testUser);
        
        // Verify legitimate login still works
        User foundUser = userService.findByUsernameAndPassword("testuser2", "testpassword2");
        
        // This should succeed for a valid login
        Assert.assertNotNull("Legitimate login should work", foundUser);
        Assert.assertEquals("testuser2", foundUser.getUsername());
        
        // Clean up test data
        userService.removeUser("testuser2");
    }
}