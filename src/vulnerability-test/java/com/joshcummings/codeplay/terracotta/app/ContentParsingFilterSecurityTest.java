/*
 * Copyright 2015-2024 Josh Cummings
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.joshcummings.codeplay.terracotta.app;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.mockito.Mockito;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import static org.mockito.Mockito.*;
import static org.testng.Assert.*;

public class ContentParsingFilterSecurityTest {
    private ContentParsingFilter filter;
    private HttpServletRequest request;
    private HttpServletResponse response;
    private FilterChain chain;
    
    @BeforeMethod
    public void setUp() {
        filter = new ContentParsingFilter();
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        chain = mock(FilterChain.class);
    }
    
    @Test(groups="http")
    public void testXmlExternalEntityInjectionPrevention() throws IOException, ServletException {
        // Set up a malicious XXE payload
        String xxePayload = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
                "<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]>" +
                "<root><name>&xxe;</name></root>";
        
        // Mock request to return our payload
        when(request.getContentType()).thenReturn("application/xml");
        when(request.getInputStream()).thenReturn(createServletInputStream(xxePayload));
        
        // Verify the filter passes the request on but doesn't process the XXE
        filter.doFilter(request, response, chain);
        
        // Verify that filter chain was called (no exception thrown)
        verify(chain).doFilter(any(ServletRequest.class), eq(response));
    }
    
    private ServletInputStream createServletInputStream(final String input) {
        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(
                input.getBytes(StandardCharsets.UTF_8));
        
        return new ServletInputStream() {
            @Override
            public int read() throws IOException {
                return byteArrayInputStream.read();
            }
            
            @Override
            public boolean isFinished() {
                return byteArrayInputStream.available() == 0;
            }
            
            @Override
            public boolean isReady() {
                return true;
            }
            
            @Override
            public void setReadListener(javax.servlet.ReadListener readListener) {
                throw new UnsupportedOperationException("setReadListener not implemented");
            }
        };
    }
}