buildscript {
    ext {
        springBootVersion = '2.7.18'  // Updated to latest stable 2.x version
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("me.champeau.gradle:jmh-gradle-plugin:0.5.3")
        classpath("org.ajoberstar:grgit:1.1.0")
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'war'
    id 'com.google.cloud.tools.jib' version '3.2.1'
}

apply plugin: 'me.champeau.gradle.jmh'

group = 'com.joshcummings'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    // Open the Git repository in the current directory.
    git = org.ajoberstar.grgit.Grgit.open(file('.'))

    // Get commit id of HEAD.
    revision = git.head().id
}

bootRun {
    systemProperty "jdk.xml.entityExpansionLimit", "0"
    jvmArgs = ["-javaagent:contrast.jar", "-Dcontrast.config.path=contrast_security.yaml", "-Dcontrast.application.session_metadata=branchName=${git.branch.getCurrent().getName()}"]
}

jib {
    from {
        image = 'tomcat:9.0-jre8-alpine'  // Updated Tomcat version
    }
    to {
        image = 'terracotta-bank:1.0'
    }
    container {
        appRoot = '/usr/local/tomcat/webapps/ROOT'
        environment = [JAVA_OPTS: '-Xmx1G -Djdk.xml.entityExpansionLimit=0']
    }
}

test {
    useTestNG()
    group = 'Verification'
    description = 'Runs functional tests'
    dependsOn 'jar'
    jvmArgs = ["-javaagent:${project.projectDir}/contrast.jar", "-Dcontrast.config.path=contrast_security.yaml", "-Dcontrast.server.environment=qa", "-Dcontrast.server.name=gradle"]
}

jmh {
    includeTests = true
    duplicateClassesStrategy = 'warn'
}

configurations {
    vulnerabilityTestImplementation.extendsFrom testImplementation
    vulnerabilityTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    vulnerabilityTest {
        java {
            srcDir project.file('src/vulnerability-test/java')
        }
        resources {
            srcDir project.file('src/vulnerability-test/resources')
        }
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += output + compileClasspath
    }
}

tasks.register('vulnerabilityTest', Test) {
    useTestNG()
    group = 'Verification'
    description = 'Runs vulnerability tests'
    dependsOn 'jar'
    testClassesDirs = sourceSets.vulnerabilityTest.output.classesDirs
    classpath = sourceSets.vulnerabilityTest.runtimeClasspath
    jvmArgs = ["-javaagent:contrast.jar","-Dcontrast.server.name=gradle", "-Dcontrast.env=qa"]
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
    options.compilerArgs << "-Xlint:unchecked"
}

idea {
    module {
        testSourceDirs += sourceSets.jmh.java.srcDirs
        testSourceDirs += sourceSets.vulnerabilityTest.java.srcDirs
    }
}

ext['tomcat.version'] = '9.0.63'  // Updated Tomcat version

dependencies {
    implementation(platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES))
    
    // Spring Boot Starters
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-web')
    
    // Spring Boot Properties Migrator - temporary for migration
    runtimeOnly('org.springframework.boot:spring-boot-properties-migrator')
    
    // Servlet & JSP related
    implementation('javax.servlet:jstl')
    implementation('org.apache.tomcat.embed:tomcat-embed-core')
    implementation('org.apache.tomcat.embed:tomcat-embed-jasper')
    
    // Other dependencies
    implementation('commons-collections:commons-collections:3.2.2')  // Updated version
    implementation('org.hsqldb:hsqldb')
    implementation('javax.mail:mail:1.4.7')  // Updated version
    implementation('javax.xml.bind:jaxb-api:2.3.1')  // Updated version
    implementation('xalan:xalan:2.7.2')  // Updated version
    implementation('ch.qos.logback:logback-classic:1.2.11')  // Updated version
    implementation('ch.qos.logback:logback-core:1.2.11')  // Updated version
    
    // Test dependencies
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation('com.github.docker-java:docker-java:3.2.13')  // Updated version
    testImplementation('com.github.mike10004:littleproxy:1.1.3socksmod1')
    testImplementation('io.github.bonigarcia:webdrivermanager:5.2.0')  // Updated version
    testImplementation('org.mockito:mockito-core')
    testImplementation('org.seleniumhq.selenium:selenium-api:4.3.0')  // Updated version
    testImplementation('org.seleniumhq.selenium:selenium-remote-driver:4.3.0')  // Updated version
    testImplementation('org.seleniumhq.selenium:selenium-firefox-driver:4.3.0')  // Updated version
    testImplementation('org.seleniumhq.selenium:selenium-support:4.3.0')  // Updated version
    testImplementation('org.testng:testng:6.14.3')  // Updated version
    testImplementation('com.squareup.okhttp3:mockwebserver:4.9.3')  // Updated version
    
    // JMH dependencies
    jmh('org.openjdk.jmh:jmh-core:1.35')  // Updated version
    jmh('org.openjdk.jmh:jmh-generator-annprocess:1.35')  // Updated version
    jmh('org.apache.httpcomponents:httpclient:4.5.13')  // Updated version
}