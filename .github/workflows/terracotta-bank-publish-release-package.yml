name: Terracotta Bank - Publish Release Package

on:
  schedule:
    - cron: "0 0 * * 0" # Weekly at midnight on Sunday
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: "8"
          distribution: "corretto"
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@ec92e829475ac0c2315ea8f9eced72db85bb337a # v3.0.0

      - name: Build WAR with Gradle
        run: ./gradlew clean build -x test

      - name: Copy WAR
        run: |
          TERRACOTTA_BANK_VERSION=0.0.1-SNAPSHOT
          cp build/libs/terracotta-bank-servlet-${TERRACOTTA_BANK_VERSION}.war terracotta.war
      
      - name: Upload Terracotta Bank Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terracotta-bank-artifacts
          path: |
            terracotta.war
            scripts/     

  package:
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Install Packages
        run: sudo apt-get install -y libxml2-utils gnupg2

      - name: Download Terracotta Bank WAR
        uses: actions/download-artifact@v4
        with:
          name: terracotta-bank-artifacts

      - name: Fetch Latest Contrast Agent Version
        id: fetch-latest-contrast-agent-version
        run: |
          # Fetch the Maven metadata XML
          curl -s https://repo1.maven.org/maven2/com/contrastsecurity/contrast-agent/maven-metadata.xml -o maven-metadata.xml

          # Extract the latest release version
          LATEST_AGENT_RELEASE_VERSION=$(xmllint --xpath 'string(/metadata/versioning/release)' maven-metadata.xml)

          echo "Latest release version is $LATEST_AGENT_RELEASE_VERSION"
          echo "latest_agent_release_version=$LATEST_AGENT_RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "$LATEST_AGENT_RELEASE_VERSION" > AGENT_VERSION

      # - name: Get Latest Release Flag
      #   id: get-latest-release-flag
      #   run: |
      #     echo "Returning Static Value for Now"
      #     # TODO: Need to add GitHub API call to get latest release tag

      #     LATEST_TAG=v6.1.1
      #     echo "Latest release tag is $LATEST_TAG"
      #     echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      # - name: Extract Previous Agent Version From Tag
      #   id: extract-previous-agent-version-from-tag
      #   run: |
      #     LATEST_TAG=${{ steps.get-latest-release-flag.outputs.latest_tag }}
      #     PREVIOUS_AGENT_RELEASE_VERSION=${LATEST_TAG#v}
      #     echo "Previous agent version is $PREVIOUS_AGENT_RELEASE_VERSION"
      #     echo "previous_agent_release_version=$PREVIOUS_AGENT_RELEASE_VERSION" >> $GITHUB_OUTPUT

      # - name: Download Latest Release Contrast Agent If Newer
      #   run: |
      #     PREVIOUS_AGENT_RELEASE_VERSION=${{ steps.extract-previous-agent-version-from-tag.outputs.previous_agent_release_version }}
      #     LATEST_AGENT_RELEASE_VERSION=${{ steps.fetch-latest-contrast-agent-version.outputs.latest_agent_release_version }}

      #     if [ "$LATEST_AGENT_RELEASE_VERSION" != "$PREVIOUS_AGENT_RELEASE_VERSION" ]; then
      #       echo "Downloading Contrast Agent version $LATEST_AGENT_RELEASE_VERSION"
      #       wget -O contrast-agent.jar "https://repo1.maven.org/maven2/com/contrastsecurity/contrast-agent/${LATEST_AGENT_RELEASE_VERSION}/contrast-agent-${LATEST_AGENT_RELEASE_VERSION}.jar"
      #       # wget -O contrast-agent.jar.sha1 "https://repo1.maven.org/maven2/com/contrastsecurity/contrast-agent/${LATEST_AGENT_RELEASE_VERSION}/contrast-agent-${LATEST_AGENT_RELEASE_VERSION}.jar.sha1"
      #       # gpg --verify contrast-agent.jar
      #     else
      #       echo "Already using the latest version: $PREVIOUS_AGENT_RELEASE_VERSION"
      #       exit 1
      #     fi

      - name: Download Latest Release Contrast Agent
        run: |
          LATEST_AGENT_RELEASE_VERSION=${{ steps.fetch-latest-contrast-agent-version.outputs.latest_agent_release_version }}
          echo "Downloading Contrast Agent version $LATEST_AGENT_RELEASE_VERSION"
          wget -O contrast-agent.jar "https://repo1.maven.org/maven2/com/contrastsecurity/contrast-agent/${LATEST_AGENT_RELEASE_VERSION}/contrast-agent-${LATEST_AGENT_RELEASE_VERSION}.jar"

      - name: Prepare Terracotta Bank Release Package
        id: prepare-terracotta-bank-release-package
        run: |
          LATEST_AGENT_RELEASE_VERSION=${{ steps.fetch-latest-contrast-agent-version.outputs.latest_agent_release_version }}
          mkdir terracotta-bank
          cp terracotta.war terracotta-bank/terracotta.war
          cp contrast-agent.jar terracotta-bank/
          chmod u+x scripts/*.*
          cp scripts/* terracotta-bank/
          zip -r terracotta-release.zip terracotta-bank/  
          
      - name: Upload Terracotta Bank Release Package
        id: upload-terracotta-bank-release-package
        uses: actions/upload-artifact@v4
        with:
          name: terracotta-bank-release
          path: |
            terracotta-release.zip
            AGENT_VERSION
  
  test-linux:
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Terracotta Bank Release Package
        id: download-terracotta-bank-release-package
        uses: actions/download-artifact@v4
        with:
          name: terracotta-bank-release

      - name: Unzip release package
        run: |
          unzip terracotta-release.zip -d ./release

      - name: Download contrast_security.yaml (Linux/MacOS)
        env:
          CONTRAST_API_ORGANIZATION_ID: ${{ secrets.CONTRAST_API_ORGANIZATION_ID }}
          CONTRAST_API_USERNAME: ${{ secrets.CONTRAST_API_USERNAME }}
          CONTRAST_API_SERVICE_KEY: ${{ secrets.CONTRAST_API_SERVICE_KEY }}
          CONTRAST_API_API_KEY: ${{ secrets.CONTRAST_API_API_KEY }}
        run: |
          CONTRAST_API_AUTH_HEADER=$(echo -n "${CONTRAST_API_USERNAME}:${CONTRAST_API_SERVICE_KEY}" | base64 -w 0)
          curl -X POST \
            -H "Authorization: ${CONTRAST_API_AUTH_HEADER}" \
            -H "API-Key: ${CONTRAST_API_API_KEY}" \
            -o ./release/terracotta-bank/contrast_security.yaml \
            "https://eval.contrastsecurity.com/Contrast/api/ng/${CONTRAST_API_ORGANIZATION_ID}/agents/external/default/JAVA"

      - name: Test Start Script on Linux
        run: |
          ./release/terracotta-bank/start.sh

      - name: Check Application on Port 8080 (Development)
        run: |
          curl --fail http://localhost:8080 || exit 1
      - name: Check Application on Port 8082 (Production)
        run: |
          curl --fail http://localhost:8082 || exit 1

      - name: Test Stop Script on Linux
        run: |
          ./release/terracotta-bank/stop.sh

      # TODO: Verify application is stopped.

      - name: Upload Terracotta Bank Logs (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: terracotta-bank-linux-logs
          path: |
            ./release/terracotta-bank/terracotta-dev.log
            ./release/terracotta-bank/terracotta-prod.log
        
  test-macos:
    needs: package
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Terracotta Bank Release Package
        id: download-terracotta-bank-release-package
        uses: actions/download-artifact@v4
        with:
          name: terracotta-bank-release
          
      - name: Unzip release package
        run: |
          unzip terracotta-release.zip -d ./release
          
      - name: Download contrast_security.yaml (Linux/MacOS)
        env:
          CONTRAST_API_ORGANIZATION_ID: ${{ secrets.CONTRAST_API_ORGANIZATION_ID }}
          CONTRAST_API_USERNAME: ${{ secrets.CONTRAST_API_USERNAME }}
          CONTRAST_API_SERVICE_KEY: ${{ secrets.CONTRAST_API_SERVICE_KEY }}
          CONTRAST_API_API_KEY: ${{ secrets.CONTRAST_API_API_KEY }}
        run: |
          CONTRAST_API_AUTH_HEADER=$(echo -n "${CONTRAST_API_USERNAME}:${CONTRAST_API_SERVICE_KEY}" | base64)
          curl -X POST \
            -H "Authorization: ${CONTRAST_API_AUTH_HEADER}" \
            -H "API-Key: ${CONTRAST_API_API_KEY}" \
            -o ./release/terracotta-bank/contrast_security.yaml \
            "https://eval.contrastsecurity.com/Contrast/api/ng/${CONTRAST_API_ORGANIZATION_ID}/agents/external/default/JAVA"

      - name: Test Start Script on MacOS
        run: |
          ./release/terracotta-bank/start.sh

      - name: Check Application on Port 8080 (Development)
        run: |
          curl --fail http://localhost:8080 || exit 1
          
      - name: Check Application on Port 8082 (Production)
        run: |
          curl --fail http://localhost:8082 || exit 1

      - name: Test Stop Script on MacOS
        run: |
          ./release/terracotta-bank/stop.sh

      # TODO: Verify application is stopped.
  
      - name: Upload Terracotta Bank Logs (MacOS)
        uses: actions/upload-artifact@v4
        with:
          name: terracotta-bank-macos-logs
          path: |
            ./release/terracotta-bank/terracotta-dev.log
            ./release/terracotta-bank/terracotta-prod.log

  test-windows:
    needs: package
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Download Terracotta Bank Release Package
        id: download-terracotta-bank-release-package
        uses: actions/download-artifact@v4
        with:
          name: terracotta-bank-release
  
      - name: Unzip release package
        run: |
          Expand-Archive -Path terracotta-release.zip -DestinationPath ./release
          
      - name: Download contrast_security.yaml (Windows)
        env:
          CONTRAST_API_ORGANIZATION_ID: ${{ secrets.CONTRAST_API_ORGANIZATION_ID }}
          CONTRAST_API_USERNAME: ${{ secrets.CONTRAST_API_USERNAME }}
          CONTRAST_API_SERVICE_KEY: ${{ secrets.CONTRAST_API_SERVICE_KEY }}
          CONTRAST_API_API_KEY: ${{ secrets.CONTRAST_API_API_KEY }}
        run: |
          $AuthHeader = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${env:CONTRAST_API_USERNAME}:${env:CONTRAST_API_SERVICE_KEY}"))
          $Headers = @{
            "Authorization" = "Basic $AuthHeader"
            "API-Key" = "${env:CONTRAST_API_API_KEY}"
            "method"="POST"
            "path"="/Contrast/api/ng/${env:CONTRAST_API_ORGANIZATION_ID}/agents/external/default/JAVA"
            "scheme"="https"
            "accept"="application/json"
            "accept-encoding"="gzip, deflate, br"
            "accept-language"="en-US,en;q=0.9"
          }
          Invoke-WebRequest -Uri "https://eval.contrastsecurity.com/Contrast/api/ng/${env:CONTRAST_API_ORGANIZATION_ID}/agents/external/default/JAVA" `
          -Method Post `
          -Headers $Headers `
          -ContentType "application/json" `
          -Body "{`"metadata`":[]}" `
          -OutFile "./release/terracotta-bank/contrast_security.yaml" `
          -Verbose

      - name: Test Start Script on Windows
        run: |
          & .\release\terracotta-bank\start.ps1

      - name: Wait Before Checking Port
        run: |
          Start-Sleep -Seconds 60 # Increase this time as needed
          Get-Job | Format-Table -Property Id, Name, State, HasMoreData

      - name: Check Application on Port 8080 (Development)
        run: |
          try {
            $tcpClient = New-Object System.Net.Sockets.TcpClient
            $tcpClient.Connect('localhost', 8080)
            $tcpClient.Close()
            Write-Host "Connection to port 8080 successful."
          } catch {
            Write-Host "Error connecting to port 8080: $_"
            exit 1
          }
  
      - name: Check Application on Port 8082 (Production)
        run: |
          try {
            $tcpClient = New-Object System.Net.Sockets.TcpClient
            $tcpClient.Connect('localhost', 8082)
            $tcpClient.Close()
            Write-Host "Connection to port 8082 successful."
          } catch {
            Write-Host "Error connecting to port 8082: $_"
            exit 1
          }
  
      - name: Test Stop Script on Windows
        run: |
          & .\release\terracotta-bank\stop.ps1

      # TODO: Verify application is stopped
  
      - name: Upload Terracotta Bank Logs (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: terracotta-bank-windows-logs
          path: |
            .\release\terracotta-bank\terracotta-dev.log
            .\release\terracotta-bank\terracotta-prod.log

  release:
    needs: [test-linux, test-macos, test-windows]
    runs-on: ubuntu-latest
    steps:
        - name: Download Release Package
          uses: actions/download-artifact@v4
          with:
            name: terracotta-bank-release

        - name: Get Agent Version
          id: fetch-contrast-agent-version
          run: |
            echo "contrast_agent_release_version=$(cat AGENT_VERSION)" >> $GITHUB_OUTPUT
          
        - name: Create Terracotta Bank Release
          id: create-terracotta-bank-release
          uses: softprops/action-gh-release@v1
          with:
            name: v${{ steps.fetch-contrast-agent-version.outputs.contrast_agent_release_version }}
            tag_name: v${{ steps.fetch-contrast-agent-version.outputs.contrast_agent_release_version }}
            draft: true
            prerelease: true
            files: |
              terracotta-release.zip
